const TaskStatusDefinitionFile = '_Assets/Task statuses';
/*
* **Description generated by Copilot**
* Loads the Task Status Definition file and parses it into a JSON object
* containing the status categories and their children statuses.
* @constant {string} TaskStatusDefinitionFile - The path to the markdown file
* containing the task statuses.
* @returns {Object} - JSON object containing the status categories and their
* children statuses.
*/
const parseAndIndexStatusCategories = () => {
    let status_categories = dv.page(TaskStatusDefinitionFile).file.lists
        .filter(el => el.children.length > 0)
        .map(el => ({
            status_category: el.text,
            children: el.children.map((children) => ({
                status: children.text
            })),
        }))
    return status_categories;
}



const CompletedStatusCategoryName = 'Completed';
/*
* **Description generated by Copilot**
* Checks if a status is in the Completed status category.
* @constant {string} CompletedStatusCategoryName - The name of status category 
* considered as Completed.
* @param {Object[]} StatusCategories - result of parseAndIndexStatusCategories().
* @param {String} statusName - The status name to check.
* @returns {Boolean} - True if the status is in the Completed status category,
* false otherwise.
*/
const IsStatusCompleted = (StatusCategories, statusName) => {
    return StatusCategories.find(
        el => el.status_category === CompletedStatusCategoryName
    ).children.some(
        el => el.status === statusName
    );
}

/*
* **Description generated by Copilot**
* Finds status of all dependent tasks.
* @returns {Object[]} - Array of objects containing the status and link of each dependent task.
*/
const getDependentTasks = () => {
    const depends_on = dv.current().depends_on.map((link) => ({
        "status": dv.page(link.path).status,
        "link": link.path
    }))
    return depends_on;
}


const calculateProgress = () => {
    const dependentTasks = getDependentTasks();
    const StatusCategories = parseAndIndexStatusCategories();

    const completedTasksStatus = dependentTasks
        .map((task) => IsStatusCompleted(StatusCategories, task.status));
    let values = {
        total: completedTasksStatus.length,
        completed: completedTasksStatus.filter((status) => status === true).length
    }

    if (values.total <= 0) {
        return 100;
    }

    return Math.floor(values.completed / values.total * 1000) / 10;
}

// console.log('getProgress scripts/dv-StatusCategoryUtils.js')
input.result = calculateProgress();